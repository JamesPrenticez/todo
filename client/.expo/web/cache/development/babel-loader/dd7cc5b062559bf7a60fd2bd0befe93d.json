{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\prent\\\\Github\\\\todo\\\\client\\\\components\\\\Task.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport _ from \"lodash\";\n\nfunction Task(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      completed = _useState2[0],\n      setCompleted = _useState2[1];\n\n  if (props.task.todo_completed && !completed) {\n    setCompleted(true);\n  }\n\n  var handleComplete = function handleComplete() {\n    var updatedTask = {\n      todo_description: props.task.todo_description,\n      todo_responsible: props.task.todo_responsible,\n      todo_priority: props.task.todo_priority,\n      todo_completed: true\n    };\n    fetch(\"http://localhost:4000/todos/update/\" + props.task._id, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(updatedTask)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res) {\n        Alert.alert(res);\n        props.updatedTasks(props.task._id);\n      }\n    }).catch(console.log);\n    setCompleted(!completed);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"flex-start\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    disabled: props.task.todo_completed ? true : false,\n    style: completed ? styles.completed : styles.button,\n    onPress: handleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, props.task.todo_description.length > 20 ? props.task.todo_description.substring(0, 21).concat(\"...\") : props.task.todo_description)), React.createElement(TouchableOpacity, {\n    style: {\n      alignSelf: \"flex-end\",\n      marginLeft: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, React.createElement(Ionicons, {\n    name: \"ios-more\",\n    size: 32,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"#eeeaea\",\n    borderRadius: 50,\n    height: 25,\n    marginRight: 20,\n    width: 25\n  },\n  completed: {\n    backgroundColor: \"#5ff0bd\",\n    borderRadius: 50,\n    height: 25,\n    marginRight: 20,\n    width: 25\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginLeft: 40,\n    marginRight: 40,\n    marginBottom: 20\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"600\"\n  }\n});\nexport default Task;","map":{"version":3,"sources":["C:/Users/prent/Github/todo/client/components/Task.js"],"names":["React","useState","Ionicons","_","Task","props","completed","setCompleted","task","todo_completed","handleComplete","updatedTask","todo_description","todo_responsible","todo_priority","fetch","_id","method","headers","Accept","body","JSON","stringify","then","res","json","Alert","alert","updatedTasks","catch","console","log","styles","container","flexDirection","justifyContent","button","text","length","substring","concat","alignSelf","marginLeft","StyleSheet","create","backgroundColor","borderRadius","height","marginRight","width","display","marginBottom","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity, Alert } from \"react-native\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport _ from \"lodash\";\r\n\r\nfunction Task(props) {\r\n  const [completed, setCompleted] = useState(false);\r\n\r\n  if (props.task.todo_completed && !completed) {\r\n    setCompleted(true);\r\n  }\r\n\r\n  const handleComplete = () => {\r\n    const updatedTask = {\r\n      todo_description: props.task.todo_description,\r\n      todo_responsible: props.task.todo_responsible,\r\n      todo_priority: props.task.todo_priority,\r\n      todo_completed: true\r\n    };\r\n\r\n    fetch(`http://localhost:4000/todos/update/${props.task._id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(updatedTask)\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res) {\r\n          Alert.alert(res);\r\n          props.updatedTasks(props.task._id);\r\n        }\r\n      })\r\n      .catch(console.log);\r\n    setCompleted(!completed);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={{ flexDirection: \"row\", justifyContent: \"flex-start\" }}>\r\n        <TouchableOpacity\r\n          disabled={props.task.todo_completed ? true : false}\r\n          style={completed ? styles.completed : styles.button}\r\n          onPress={handleComplete}\r\n        />\r\n        <Text style={styles.text}>\r\n          {props.task.todo_description.length > 20\r\n            ? props.task.todo_description.substring(0, 21).concat(\"...\")\r\n            : props.task.todo_description}\r\n        </Text>\r\n      </View>\r\n      <TouchableOpacity style={{ alignSelf: \"flex-end\", marginLeft: 50 }}>\r\n        <Ionicons name=\"ios-more\" size={32} color=\"black\" />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    backgroundColor: \"#eeeaea\",\r\n    borderRadius: 50,\r\n    height: 25,\r\n    marginRight: 20,\r\n    width: 25\r\n  },\r\n  completed: {\r\n    backgroundColor: \"#5ff0bd\",\r\n    borderRadius: 50,\r\n    height: 25,\r\n    marginRight: 20,\r\n    width: 25\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginLeft: 40,\r\n    marginRight: 40,\r\n    marginBottom: 20\r\n  },\r\n  text: {\r\n    fontSize: 20,\r\n    fontWeight: \"600\"\r\n  }\r\n});\r\n\r\nexport default Task;"]},"metadata":{},"sourceType":"module"}