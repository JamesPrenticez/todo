{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\prent\\\\Github\\\\todo\\\\client\\\\components\\\\TaskForm.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\n\nfunction TaskForm(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputState = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useState3 = useState(\"low\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pickerState = _useState4[0],\n      setPickerValue = _useState4[1];\n\n  function handleSubmit() {\n    var newTask;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (inputState && pickerState) {\n              newTask = {\n                todo_description: inputState,\n                todo_responsible: \"Tyler\",\n                todo_priority: pickerState,\n                todo_completed: false\n              };\n              fetch(\"http://localhost:4000/todos/add\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Accept: \"application/json\"\n                },\n                body: JSON.stringify(newTask)\n              }).then(function (res) {\n                return res.json();\n              }).then(function (res) {\n                if (res) {\n                  Alert.alert(res.todos);\n                  props.navigation.goBack();\n                }\n              }).catch(console.log);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    autoFocus: true,\n    style: {\n      borderWidth: 1,\n      borderColor: \"#5ce0e9\",\n      borderTopColor: \"white\",\n      color: \"black\",\n      fontSize: 50,\n      marginTop: 10,\n      paddingLeft: 10\n    },\n    value: inputState,\n    onChangeText: function onChangeText(text) {\n      return setInput(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), React.createElement(Picker, {\n    selectedValue: pickerState,\n    onValueChange: function onValueChange(itemValue, itemIndex) {\n      setPickerValue(itemValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, React.createElement(Picker.Item, {\n    label: \"low\",\n    value: \"low\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"medium\",\n    value: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"high\",\n    value: \"high\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: handleSubmit,\n    style: {\n      borderRadius: 10,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      marginTop: 30,\n      backgroundColor: \"#25aae1\",\n      padding: 5,\n      height: 40,\n      width: 80\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      fontWeight: \"800\",\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}\n\nexport default TaskForm;","map":{"version":3,"sources":["C:/Users/prent/Github/todo/client/components/TaskForm.js"],"names":["React","useState","TaskForm","props","inputState","setInput","pickerState","setPickerValue","handleSubmit","newTask","todo_description","todo_responsible","todo_priority","todo_completed","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","Alert","alert","todos","navigation","goBack","catch","console","log","borderWidth","borderColor","borderTopColor","color","fontSize","marginTop","paddingLeft","text","itemValue","itemIndex","borderRadius","marginLeft","marginRight","backgroundColor","padding","height","width","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Picker,\r\n  TextInput,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n  Alert\r\n} from \"react-native\";\r\n\r\nfunction TaskForm(props) {\r\n  const [inputState, setInput] = useState(\"\");\r\n  const [pickerState, setPickerValue] = useState(\"low\");\r\n\r\n  async function handleSubmit() {\r\n    if (inputState && pickerState) {\r\n      const newTask = {\r\n        todo_description: inputState,\r\n        todo_responsible: \"Tyler\",\r\n        todo_priority: pickerState,\r\n        todo_completed: false\r\n      };\r\n\r\n      fetch(\"http://localhost:4000/todos/add\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        },\r\n        body: JSON.stringify(newTask)\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (res) {\r\n            Alert.alert(res.todos);\r\n            props.navigation.goBack();\r\n          }\r\n        })\r\n        .catch(console.log);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <TextInput\r\n        autoFocus\r\n        style={{\r\n          borderWidth: 1,\r\n          borderColor: \"#5ce0e9\",\r\n          borderTopColor: \"white\",\r\n          color: \"black\",\r\n          fontSize: 50,\r\n          marginTop: 10,\r\n          paddingLeft: 10\r\n        }}\r\n        value={inputState}\r\n        onChangeText={text => setInput(text)}\r\n      />\r\n      <Picker\r\n        selectedValue={pickerState}\r\n        onValueChange={(itemValue, itemIndex) => {\r\n          setPickerValue(itemValue);\r\n        }}\r\n      >\r\n        <Picker.Item label=\"low\" value=\"low\" />\r\n        <Picker.Item label=\"medium\" value=\"medium\" />\r\n        <Picker.Item label=\"high\" value=\"high\" />\r\n      </Picker>\r\n      <TouchableOpacity\r\n        onPress={handleSubmit}\r\n        style={{\r\n          borderRadius: 10,\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          marginTop: 30,\r\n          backgroundColor: \"#25aae1\",\r\n          padding: 5,\r\n          height: 40,\r\n          width: 80\r\n        }}\r\n      >\r\n        <Text style={{ color: \"white\", fontWeight: \"800\", padding: 5 }}>\r\n          Submit\r\n        </Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default TaskForm;"]},"metadata":{},"sourceType":"module"}